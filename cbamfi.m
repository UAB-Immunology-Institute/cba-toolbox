function F = cbamfi(F)

% CBAMFI find MFI for each protein-isotype combination
%
%    A = CBAMFI(A) reads a data structure generated by CBAPEAK and
%    adds to the output table the MFI of each protein for each secondary
%    isotype.
%
%    Usage:
%
%        A = CBAMFI(A);
%
%    Requires Matlab Curve Fitting Toolbox
%
% -------------------------------------------------------------------------
%
%    Authors: Alexander F. Rosenberg (afr@uab.edu) and Rodney G. King
%        with John T. Killian, Todd J. Green, J. Akther, M. Emon Hossain,
%        Shihong Qiu, Guang Yang, Troy D. Randall and Frances E. Lund
%
%    University of Alabama at Birmingham
%    Department of Microbiology
%    April 11, 2023
%    Copyright (C) 2023 UAB Research Foundation
%    This software is offered with no guarantees of any kind.
%
%    see: "A high-throughput multiplex array for antigen-specific serology
%    with automated analysis", bioRxiv 2023 April.
%    doi: 10.1101/2023.03.29.534777
%
%    This file (part of the "CBA Toolbox") is free software: you can
%    redistribute it and/or modify it under the terms of the GNU General
%    Public License as published by the Free Software Foundation, version 3
%    of the License.  This file is distributed in the hope that it will be
%    useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%    General Public License for more details.  You should have received a
%    copy of the GNU General Public License along with this program.  If  
%    not, see https://www.gnu.org/licenses/gpl-3.0.en.html.


    % number of protein features
    nfeat = size(F.out, 1);
    
    % get names of isotype columns
    iso = regexprep(strsplit(F.flowconf, ','), ':.*$', '');
    niso = length(iso);
    
    % add columns to output table
    for i = 1:niso, F.out.(iso{i}) = nan(nfeat, 1); end
    
    % generate plot data
    ed = -1:F.settings.beadreac_bin_size:9;
    x = ed(2:end) - (F.settings.beadreac_bin_size / 2);
    PL = struct;
    
    % step through features
    for i = 1:nfeat 
        
        % events for current feature        
        k = F.event.size == F.out.size(i) & F.event.peak == F.out.peak(i);
        if ~isnan(F.splitchan), k = k & F.event.bin == F.out.bin(i); end
        
        % step through isotypes (secondaries)
        for j = 1:niso
            y = histcounts(F.event.(iso{j})(k), ed);
            y = smooth(x, y, F.settings.beadreac_loess_smooth, 'loess');
            PL(i, j).y = y / max(y);
            imax = find(PL(i, j).y == max(PL(i, j).y));
            imax = imax(1);        % in case two points next to each other
            PL(i, j).imax = imax;
            F.out.(iso{j})(i) = x(imax);
        end
        
    end

    % if render plot
    if F.display == 1
                
        % # isotypes, features
        [nfeat, niso] = size(PL);
    
        % pixel dimensions of components
        pw = 170;
        ph = 20;
        hsp = 10;
        vsp = 5;
        bot = 60;
        top = 10;
        left = 125;
        right = 120;
        fw = left + (pw * niso) + (hsp * (niso - 1)) + right;
        fh = bot + (ph * nfeat) + (vsp * (nfeat -1)) + top;

        % offsets for plots
        yoff = ((((1:nfeat) - 1) * (ph + vsp)) + bot) / fh;
        xoff = ((((1:niso) - 1) * (pw + hsp)) + left) / fw;
    
        % preferences for invisible axes
        pref = struct(...
            'xtick', [],...
            'ytick', [],...
            'xcolor', 'w',...
            'ycolor', 'w',...
            'box', 'off',...
            'xlim', [0 1],...
            'ylim', [0 1]);

        % draw figure
        FIG5 = figure('position', [710 50 fw fh]);
    
        % step through features
        for i = 1:nfeat

            % positions for left and right feature annotations
            posl = [0, yoff(i), left / fw, ph / fh];
            posr = [(fw - right) / fw, yoff(i), right / fw, ph / fh];        
        
            % bead size/split-bin color, feature IDs
            if isnan(F.splitchan)
                c = F.pref.colororder{F.out.size(i), 1};
                t = ['peak ' num2str(F.out.size(i))...
                    '.' num2str(F.out.peak(i))...
                    ' (' num2str(F.out.events(i)) ')'];
            else
                c = F.pref.colororder{F.out.size(i), F.out.bin(i)};
                t = ['peak ' num2str(F.out.size(i))...
                    '.' num2str(F.out.bin(i))...
                    '.' num2str(F.out.peak(i))...
                    ' (' num2str(F.out.events(i)) ')'];
            end            
            
            % print peak number and # events
            subplot('position', posl);
            text(.05, .5, t, 'fontname', 'arial', 'fontsize', 14);
            set(gca, pref);
        
            % print protein name
            subplot('position', posr);
            text(.1, .5, F.out.name{i}, 'fontname', 'arial', 'fontsize', 14);
            set(gca, pref);
        
            % draw reactivity plots for each feature and isotype
            for j = 1:niso
                pos = [xoff(j), yoff(i), pw / fw, ph / fh];
                subplot('position', pos, 'nextplot', 'add');
                plot(x, PL(i, j).y, '-', 'color', c, 'linewidth', 1.5);
                xmax = x(PL(i, j).imax);
                ymax = PL(i, j).y(PL(i, j).imax);
                plot([xmax xmax], [0 ymax], '-', 'color', c, 'linewidth', 1); 
                xr = [F.settings.beadreac_range(1) x(PL(i, j).imax)];
                fill(xr([1 1 2 2 1]), [0 1 1 0 0], c,...
                    'edgecolor', 'none', 'facealpha', .15);            
                set(gca,...
                    'ytick', [],...
                    'ticklength', [0 0],...
                    'xlim', F.settings.beadreac_range,...
                    'ylim', [0 1],...
                    'linewidth', 1,...
                    'box', 'off',...
                    'fontname', 'arial',...
                    'fontsize', 12);
                if i > 1, set(gca, 'xticklabel', {}); end
                if i == 1
                    xlabel(iso{j}, 'fontname', 'arial', 'fontsize', 18);
                end
            end
            
        end
        
        % make figure background white
        set(gcf, 'inverthardcopy', 'off', 'color', 'w');     

        % add to figure handles
        F.figures(5) = FIG5;        
                
    end

