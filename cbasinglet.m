function F = cbasinglet(F)

% CBASINGLET read cba flow structure and remove non-singlets
%
%    A = CBASINGLET(A) reads a data structure generated by CBASIZE and
%    removes bead size annotations that are not singlets.  Non-singlets are
%    outliers in the main densities in forward scatter height vs area
%    plots.  If figures were requested (set display flag = 1 in
%    cbaload) then a forward scatter height vs area scatter plot with
%    non-singlets shown is generated
%
%    Usage:
%
%        A = CBASINGLET(A);
%
%    Uses the function "dscatter.m" to render 2-D scatter/density plots
%    Copyright (c) 2016, MathWorks Inc. All rights reserved.
%
%    Requires Matlab Statistics Toolbox
%
% -------------------------------------------------------------------------
%
%    Authors: Alexander F. Rosenberg (afr@uab.edu) and Rodney G. King
%        with John T. Killian, Fen Zhou, Davide Botta, Todd J. Green,
%        Jobaida Akther, M. Emon Hossain, Shihong Qiu, Guang Yang,
%        Troy D. Randall and Frances E. Lund
%
%    University of Alabama at Birmingham
%    Department of Microbiology
%    April 11, 2023
%    Copyright (C) 2024 UAB Research Foundation
%    This software is offered with no guarantees of any kind.
%
%    see: "A high-throughput multiplex array for antigen-specific serology
%    with automated analysis", bioRxiv 2023 April.
%    doi: 10.1101/2023.03.29.534777
%
%    This file (part of the "CBA Toolbox") is free software: you can
%    redistribute it and/or modify it under the terms of the GNU General
%    Public License as published by the Free Software Foundation, version 3
%    of the License.  This file is distributed in the hope that it will be
%    useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%    General Public License for more details.  You should have received a
%    copy of the GNU General Public License along with this program.  If  
%    not, see https://www.gnu.org/licenses/gpl-3.0.en.html.


    % summary counts
    F.counts.bead_size_singlets = nan(F.nbeadsize, 1);

    % indices of events in bead size gates
    S = struct;
        
    % identify singlets via density-based clustering
    for i = 1:F.nbeadsize

        % events in current size bucket
        isz = find(F.event.size == i);
        
        % FSC area and height for events in current size bucket
        S(i).a = F.event.FSC_A(isz);
        S(i).h = F.event.FSC_H(isz);
        
        % density-based clustering to find outliers
        idbc = dbscan([S(i).a S(i).h],...
            F.settings.beadsing_dbclus_epsilon,...
            F.settings.beadsing_dbclus_min_points);
        S(i).idx = find(idbc > 0);
        S(i).outlier = find(idbc == -1);
        
        % record non-singlets to mark for exclude
        F.event.size(intersect(...
            find(F.event.size == i), isz(S(i).outlier))) = NaN;
        
        % record for stats
        F.counts.bead_size_singlets(i) = length(S(i).idx);
    end

    % if render plot
    if F.display == 1
                
        % pixel dimension of components
        pw = 500;
        ph = 120;
        vsp = 40;
        left = 60;
        bot = 60;
        top = 10;
        right = 65;
        fw = left + pw + right;
        fh = bot + (ph * F.nbeadsize) + (vsp * (F.nbeadsize - 1)) + top;
        yoff = (((0:(F.nbeadsize - 1)) * (ph + vsp)) + bot) / fh;
        
        % draw figure
        FIG2 = figure('position', [660 660 fw fh]);

        % render plots, find outliers, threshold based on user parameter
        for i = 1:F.nbeadsize

            % plot 2-D density and contours
            subplot('position', [left / fw, yoff(i), pw / fw, ph / fh],...
                'nextplot', 'add');
            dscatter(S(i).a, S(i).h);

            % show outliers
            plot(S(i).a(S(i).outlier), S(i).h(S(i).outlier), 'mo');

            % clean up plot
            set(gca,...
                'tickdir', 'out',...
                'linewidth', 1,...
                'box', 'off',...
                'fontname', 'arial',...
                'fontsize', 12);
            ylabel('FSC-H (arcsinh)', 'fontname', 'arial', 'fontsize', 18);  
            if i == 1
                xlabel('FSC-A (arcsinh)', 'fontname', 'arial', 'fontsize', 18);
            end

            % add event counts
            xt = (diff(xlim) * 1.02) + min(xlim);
            yt = mean(ylim);
            text(xt, yt, num2str(length(S(i).idx)),...
                'fontname', 'arial',...
                'fontsize', 14,...
                'color', F.pref.colororder{i, 1});
        
        end
        
        % clean up plot
        set(gcf, 'inverthardcopy', 'off', 'color', 'w');     
        
        % add to figure handles
        F.figures(2) = FIG2;        
        
    end
    
